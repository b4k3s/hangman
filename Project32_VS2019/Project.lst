Microsoft (R) Macro Assembler Version 14.28.29914.0	    05/05/21 00:53:08
Hangman         (Hangman.asm				     Page 1 - 1


				TITLE Hangman         (Hangman.asm)
				;                                                    ______
				;   _   _                                            |/   |
				;  | | | | __ _ _ __   __ _ _ __ ___   __ _ _ __     |    ()
				;  | |_| |/ _` | '_ \ / _` | '_ ` _ \ / _` | '_ \    |   /||\
				;  |  _  | (_| | | | | (_| | | | | | | (_| | | | |   |    /\
				;  |_| |_|\__,_|_| |_|\__, |_| |_| |_|\__,_|_| |_|   |\
				;                     |___/                         ``````````
				;                              Final Project
				;
				; Version:      1.0
				; Group:        Team C (MASM)
				; Authors:      Christian Baker (Lead)
				;               Anthony Cardona
				;               Luke Shoff
				;               Brendon Stutzman
				;
				; Class:        CIS 121 - Assembly Language & Computer Architecture
				; Instructor:   Professor Manuel Hidalgo
				; Date:         5 May 2021
				;
				; Description:
				;   Allows the user to play an ASCII art version of the classic game,
				;   Hangman. Shows a main menu where the user can choose to play the
				;   game, quit the program, or see the credits for the game. The game
				;   gives the user 7 wrong letter guesses to find the random word from
				;   the hardcoded word bank. If the user guesses the word before reaching
				;   7 wrong guesses, they win the game. If the user guesses 7 wrong
				;   letters and has not found the word, they lose. All input is entered
				;   from the keyboard; any invalid input is ignored.
				;
				;   * BA in comments stands for base address
				;
				;   Note: The length of our program is 416 lines of code in total
				;   without whitespace and comments, but about 1/4 of that is taken up
				;   by our string initializations due to the long, hardcoded list of
				;   words required for the game.
				;
				;--------------------------------------------------------------------------
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; We made use of the following procedures from Kip Irvine's x86 library:
				;   Crlf            - Prints a newline
				;   Gotoxy          - Moves the cursor to position; DH,DL = row,col
				;   Randomize       - Seeds the random number generator for RandomRange
				;   RandomRange     - Generates a random # between 0 and value in EAX reg
				;   ReadChar        - Gets char from keyboard and stores in EAX reg
				;   Str_copy        - Copies one string variable to another string variable
				;   Str_length      - Loads the length of a given string into the EAX reg
				;   WriteChar       - Prints char in the EAX register
				;   WriteString     - Prints string starting with base address in EDX reg
				;--------------------------------------------------------------------------

 00000000			.data
 00000000  0000000F [		theWord         byte    15  DUP(0)  ; The word to be guessed
	    00
	   ]
 0000000F 00			numOfWrong      byte    0           ; # of wrong guesses
 00000010 00			numOfRight      byte    0           ; # of right guesses
 00000011  00000007 [		wrongGuesses    byte    7   DUP(0)  ; Array of user's wrong guesses
	    00
	   ]
 00000018  0000001A [		rightGuesses    byte    26  DUP(0)  ; Array of user's right guesses
	    00
	   ]
 00000032 00			gameDone        byte    0           ; Bool to tell program if game is done

				; Words to Guess (List curated by Brendon Stutzman)
 00000033 3C			numOfWords      byte    60
 00000034 44 49 4E 4F 53	word00          byte    "DINOSAUR",0
	   41 55 52 00
 0000003D 42 41 4E 4A 4F	word01          byte    "BANJO",0
	   00
 00000043 42 49 4B 49 4E	word02          byte    "BIKINI",0
	   49 00
 0000004A 42 4C 49 5A 5A	word03          byte    "BLIZZARD",0
	   41 52 44 00
 00000053 44 49 5A 5A 59	word04          byte    "DIZZY",0
	   00
 00000059 46 4C 41 50 4A	word05          byte    "FLAPJACK",0
	   41 43 4B 00
 00000062 47 41 4C 41 58	word06          byte    "GALAXY",0
	   59 00
 00000069 49 43 45 42 4F	word07          byte    "ICEBOX",0
	   58 00
 00000070 4A 55 4D 42 4F	word08          byte    "JUMBO",0
	   00
 00000076 47 4F 53 53 49	word09          byte    "GOSSIP",0
	   50 00
 0000007D 4A 55 4B 45 42	word10          byte    "JUKEBOX",0
	   4F 58 00
 00000085 4B 41 59 41 4B	word11          byte    "KAYAK",0
	   00
 0000008B 4C 55 43 4B 59	word12          byte    "LUCKY",0
	   00
 00000091 52 48 59 54 48	word13          byte    "RHYTHM",0
	   4D 00
 00000098 53 55 42 57 41	word14          byte    "SUBWAY",0
	   59 00
 0000009F 57 49 54 43 48	word15          byte    "WITCHCRAFT",0
	   43 52 41 46 54
	   00
 000000AA 56 4F 52 54 45	word16          byte    "VORTEX",0
	   58 00
 000000B1 57 52 49 53 54	word17          byte    "WRISTWATCH",0
	   57 41 54 43 48
	   00
 000000BC 53 57 49 56 45	word18          byte    "SWIVEL",0
	   4C 00
 000000C3 4B 4E 41 50 53	word19          byte    "KNAPSACK",0
	   41 43 4B 00
 000000CC 51 55 41 52 54	word20          byte    "QUARTZ",0
	   5A 00
 000000D3 50 41 4A 41 4D	word21          byte    "PAJAMAS",0
	   41 53 00
 000000DB 4A 41 43 4B 50	word22          byte    "JACKPOT",0
	   4F 54 00
 000000E3 42 4F 4F 4B 57	word23          byte    "BOOKWORM",0
	   4F 52 4D 00
 000000EC 5A 4F 44 49 41	word24          byte    "ZODIAC",0
	   43 00
 000000F3 41 56 45 4E 55	word25          byte    "AVENUE",0
	   45 00
 000000FA 54 52 41 4E 53	word26          byte    "TRANSCRIPT",0
	   43 52 49 50 54
	   00
 00000105 44 41 49 51 55	word27          byte    "DAIQUIRI",0
	   49 52 49 00
 0000010E 42 45 45 4B 45	word28          byte    "BEEKEEPER",0
	   45 50 45 52 00
 00000118 41 57 4B 57 41	word29          byte    "AWKWARD",0
	   52 44 00
 00000120 46 49 53 48 48	word30          byte    "FISHHOOK",0
	   4F 4F 4B 00
 00000129 42 41 47 50 49	word31          byte    "BAGPIPES",0
	   50 45 53 00
 00000132 4A 45 4C 4C 59	word32          byte    "JELLY",0
	   00
 00000138 4A 41 57 42 52	word33          byte    "JAWBREAKER",0
	   45 41 4B 45 52
	   00
 00000143 4A 55 49 43 59	word34          byte    "JUICY",0
	   00
 00000149 4A 41 43 4B 50	word35          byte    "JACKPOT",0
	   4F 54 00
 00000151 50 45 45 4B 41	word36          byte    "PEEKABOO",0
	   42 4F 4F 00
 0000015A 55 4E 4B 4E 4F	word37          byte    "UNKNOWN",0
	   57 4E 00
 00000162 4B 4C 55 54 5A	word38          byte    "KLUTZ",0
	   00
 00000168 4F 58 59 47 45	word39          byte    "OXYGEN",0
	   4E 00
 0000016F 50 49 58 45 4C	word40          byte    "PIXEL",0
	   00
 00000175 56 41 50 4F 52	word41          byte    "VAPORIZE",0
	   49 5A 45 00
 0000017E 43 4F 42 57 45	word42          byte    "COBWEB",0
	   42 00
 00000185 59 55 4D 4D 59	word43          byte    "YUMMY",0
	   00
 0000018B 5A 4F 4D 42 49	word44          byte    "ZOMBIE",0
	   45 00
 00000192 5A 49 47 5A 41	word45          byte    "ZIGZAG",0
	   47 00
 00000199 5A 49 50 50 45	word46          byte    "ZIPPER",0
	   52 00
 000001A0 53 50 48 49 4E	word47          byte    "SPHINX",0
	   58 00
 000001A7 51 55 49 5A 00	word48          byte    "QUIZ",0
 000001AC 50 55 50 50 59	word49          byte    "PUPPY",0
	   00
 000001B2 4D 49 43 52 4F	word50          byte    "MICROWAVE",0
	   57 41 56 45 00
 000001BC 46 4C 55 46 46	word51          byte    "FLUFFY",0
	   59 00
 000001C3 43 52 4F 51 55	word52          byte    "CROQUET",0
	   45 54 00
 000001CB 41 56 45 4E 55	word53          byte    "AVENUE",0
	   45 00
 000001D2 50 4E 45 55 4D	word54          byte    "PNEUMONIA",0
	   4F 4E 49 41 00
 000001DC 47 4E 41 52 4C	word55          byte    "GNARLY",0
	   59 00
 000001E3 4B 45 59 48 4F	word56          byte    "KEYHOLE",0
	   4C 45 00
 000001EB 4C 55 58 55 52	word57          byte    "LUXURY",0
	   59 00
 000001F2 4D 45 47 41 48	word58          byte    "MEGAHERTZ",0
	   45 52 54 5A 00
 000001FC 59 4F 55 54 48	word59          byte    "YOUTH",0
	   00

				; Array of the strings above
 00000202 00000034 R		wordBank        dword   word00,word01,word02,word03,word04,word05
	   0000003D R
	   00000043 R
	   0000004A R
	   00000053 R
	   00000059 R
 0000021A  00000062 R		                dword   word06,word07,word08,word09,word10,word11
	   00000069 R
	   00000070 R
	   00000076 R
	   0000007D R
	   00000085 R
 00000232  0000008B R		                dword   word12,word13,word14,word15,word16,word17
	   00000091 R
	   00000098 R
	   0000009F R
	   000000AA R
	   000000B1 R
 0000024A  000000BC R		                dword   word18,word19,word20,word21,word22,word23
	   000000C3 R
	   000000CC R
	   000000D3 R
	   000000DB R
	   000000E3 R
 00000262  000000EC R		                dword   word24,word25,word26,word27,word28,word29
	   000000F3 R
	   000000FA R
	   00000105 R
	   0000010E R
	   00000118 R
 0000027A  00000120 R		                dword   word30,word31,word32,word33,word34,word35
	   00000129 R
	   00000132 R
	   00000138 R
	   00000143 R
	   00000149 R
 00000292  00000151 R		                dword   word36,word37,word38,word39,word40,word41
	   0000015A R
	   00000162 R
	   00000168 R
	   0000016F R
	   00000175 R
 000002AA  0000017E R		                dword   word42,word43,word44,word45,word46,word47
	   00000185 R
	   0000018B R
	   00000192 R
	   00000199 R
	   000001A0 R
 000002C2  000001A7 R		                dword   word48,word49,word50,word51,word52,word53
	   000001AC R
	   000001B2 R
	   000001BC R
	   000001C3 R
	   000001CB R
 000002DA  000001D2 R		                dword   word54,word55,word56,word57,word58,word59
	   000001DC R
	   000001E3 R
	   000001EB R
	   000001F2 R
	   000001FC R

				; String of spaces used to clear screen
 000002F2 20 20 20 20 20	clearStr        byte    "                                  ",0dh,0ah,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 0D
	   0A 00

				; Prompts and Messages
 00000317 20 4D 61 6B 65	makeSelect      byte    " Make a Selection: ",0
	   20 61 20 53 65
	   6C 65 63 74 69
	   6F 6E 3A 20 00
 0000032B 20 50 72 65 73	pressKey        byte    " Press Any Key: ",0
	   73 20 41 6E 79
	   20 4B 65 79 3A
	   20 00
 0000033C 20 41 6C 72 65	triedLetters    byte    " Already Tried: ",0
	   61 64 79 20 54
	   72 69 65 64 3A
	   20 00
 0000034D 20 43 68 6F 6F	chooseLetter    byte    " Choose a Letter: ",0
	   73 65 20 61 20
	   4C 65 74 74 65
	   72 3A 20 00

				; Main Menu Strings
 00000360 20 20 20 20 20	titleScr        byte    "          Hangman",0dh,0ah,0dh,0ah,0dh,0ah
	   20 20 20 20 20
	   48 61 6E 67 6D
	   61 6E 0D 0A 0D
	   0A 0D 0A
 00000377  20 20 20 20 20	                byte    "          [s]tart",0dh,0ah
	   20 20 20 20 20
	   5B 73 5D 74 61
	   72 74 0D 0A
 0000038A  20 20 20 20 20	                byte    "          [q]uit",0dh,0ah
	   20 20 20 20 20
	   5B 71 5D 75 69
	   74 0D 0A
 0000039C  20 20 20 20 20	                byte    "          [c]redits",0dh,0ah,0
	   20 20 20 20 20
	   5B 63 5D 72 65
	   64 69 74 73 0D
	   0A 00

				; Credits String
 000003B2 20 20 20 20 20	madeBy          byte    "          Made by:",0dh,0ah,0dh,0ah
	   20 20 20 20 20
	   4D 61 64 65 20
	   62 79 3A 0D 0A
	   0D 0A
 000003C8  20 20 20 20 20	                byte    "      Christian Baker",0dh,0ah
	   20 43 68 72 69
	   73 74 69 61 6E
	   20 42 61 6B 65
	   72 0D 0A
 000003DF  20 20 20 20 20	                byte    "      Anthony Cardona",0dh,0ah
	   20 41 6E 74 68
	   6F 6E 79 20 43
	   61 72 64 6F 6E
	   61 0D 0A
 000003F6  20 20 20 20 20	                byte    "         Luke Shoff",0dh,0ah
	   20 20 20 20 4C
	   75 6B 65 20 53
	   68 6F 66 66 0D
	   0A
 0000040B  20 20 20 20 20	                byte    "      Brendon Stutzman",0dh,0ah,0
	   20 42 72 65 6E
	   64 6F 6E 20 53
	   74 75 74 7A 6D
	   61 6E 0D 0A 00

				; Gallows Strings
 00000424 0D 0A 20 20 5F	gallowsTop      byte    0dh,0ah,"  ______",0dh,0ah
	   5F 5F 5F 5F 5F
	   0D 0A
 00000430  20 20 7C 2F 20	                byte    "  |/   |",0dh,0ah
	   20 20 7C 0D 0A
 0000043A  20 20 7C 20 20	                byte    "  |    |",0dh,0ah,0
	   20 20 7C 0D 0A
	   00
 00000445 20 20 7C 20 20	gallowsNoose    byte    "  |    O",0dh,0ah,0
	   20 20 4F 0D 0A
	   00
 00000450 20 20 7C 0D 0A	gallowsMid      byte    "  |",0dh,0ah,0
	   00
 00000456 20 20 7C 5C 0D	gallowsBase     byte    "  |\",0dh,0ah
	   0A
 0000045C  20 60 60 60 60	                byte    " `````````",0dh,0ah,0
	   60 60 60 60 60
	   0D 0A 00

				; Man Strings
 00000469 20 20 7C 20 20	manHead         byte    "  |    ()",0dh,0ah,0
	   20 20 28 29 0D
	   0A 00
 00000475 20 20 7C 20 20	manTorso        byte    "  |    ||",0dh,0ah,0
	   20 20 7C 7C 0D
	   0A 00
 00000481 20 20 7C 20 20	manArm          byte    "  |   /||",0dh,0ah,0
	   20 2F 7C 7C 0D
	   0A 00
 0000048D 20 20 7C 20 20	manArms         byte    "  |   /||\",0dh,0ah,0
	   20 2F 7C 7C 5C
	   0D 0A 00
 0000049A 20 20 7C 20 20	manLeg          byte    "  |    /",0dh,0ah,0
	   20 20 2F 0D 0A
	   00
 000004A5 20 20 7C 20 20	manLegs         byte    "  |    /\",0dh,0ah,0
	   20 20 2F 5C 0D
	   0A 00

				; End of Game Strings
 000004B1 20 20 20 20 20	winnerMsg       byte    "        You Win! :)",0dh,0ah,0
	   20 20 20 59 6F
	   75 20 57 69 6E
	   21 20 3A 29 0D
	   0A 00
 000004C7 20 20 20 20 20	loserMsg        byte    "        Game Over :(",0dh,0ah,0
	   20 20 20 47 61
	   6D 65 20 4F 76
	   65 72 20 3A 28
	   0D 0A 00
 000004DE 20 20 20 20 20	wordWas         byte    "       The word was",0dh,0ah,"         ",0
	   20 20 54 68 65
	   20 77 6F 72 64
	   20 77 61 73 0D
	   0A 20 20 20 20
	   20 20 20 20 20
	   00

 00000000			.code
 00000000			main PROC
 00000000			MainMenu:
 00000000  E8 0000008D		    call PrintMenu                  ; Print the menu screen
 00000005  E8 00000000 E	    call ReadChar                   ; Get input char from user
 0000000A  3C 71		    cmp  al,'q'                     ; If user input is 'q'...
 0000000C  74 78		    je   QuitGame                   ; Then quit game
 0000000E  3C 73		    cmp  al,'s'                     ; If user input is 's'...
 00000010  74 06		    je   PlayGame                   ; Then start game
 00000012  3C 63		    cmp  al,'c'                     ; If user input is 'c'...
 00000014  74 61		    je   CreditScreen               ; Then show credits
 00000016  EB E8		    jmp  MainMenu                   ; Else jump back to MainMenu

 00000018			PlayGame:
 00000018  E8 00000363		    call ClearScreen                ; Clear the screen
 0000001D  B8 00000000		    mov  eax,0                      ; Initialize input for game
 00000022  A2 00000032 R	    mov  gameDone,al                ; Set gameDone to false (0)
 00000027  A2 00000010 R	    mov  numOfRight,al              ; Set # of right guesses to 0
 0000002C  A2 0000000F R	    mov  numOfWrong,al              ; Set # of wrong guesses to 0
 00000031  E8 000000C0		    call GetWord                    ; Get random word from word bank
 00000036			ContGame:
 00000036  E8 000000F0		    call PrintHangman               ; Print ASCII art hangman
 0000003B  E8 00000172		    call PrintWord                  ; Print letters or underscores
 00000040  E8 000001DA		    call PrintGuesses               ; Print wrong letters tried
 00000045  BA 0000034D R	    mov  edx,OFFSET chooseLetter    ; EDX <-- BA of chooseLetter
 0000004A  E8 00000000 E	    call WriteString                ; Print user prompt for letter
 0000004F  A0 00000032 R	    mov  al,gameDone                ; AL <-- gameDone
 00000054  3C 00		    cmp  al,0                       ; If gameDone is true...
 00000056  7F 13		    jg   EndGame                    ; Then go to EndGame
 00000058  E8 00000000 E	    call ReadChar                   ; Get guessed letter from user
 0000005D  E8 00000207		    call CheckChar                  ; Store char if eligible
 00000062  A0 00000032 R	    mov  al,gameDone                ; AL <-- gameDone
 00000067  3C 01		    cmp  al,1                       ; If gameDone is false...
 00000069  7C CB		    jl   ContGame                   ; Then go to ContGame
 0000006B			EndGame:
 0000006B  E8 000002A9		    call PrintEnd                   ; Print Win/Lose Screen
 00000070  E8 00000000 E	    call ReadChar                   ; Wait for input (Pause)
 00000075  EB 89		    jmp  MainMenu                   ; Jump back to MainMenu

 00000077			CreditScreen:
 00000077  E8 00000048		    call PrintCredits               ; Print credits
 0000007C  E8 00000000 E	    call ReadChar                   ; Wait for input (Pause)
 00000081  E9 FFFFFF7A		    jmp  MainMenu                   ; Jump back to MainMenu

 00000086			QuitGame:
 00000086  E8 000002F5		    call ClearScreen                ; Clear the screen
				    exit
 0000008B  6A 00	   *	    push   +000000000h
 0000008D  E8 00000000 E   *	    call   ExitProcess
 00000092			main ENDP

				;--------------------------------------------------------------------------
 00000092			PrintMenu PROC USES ecx edx
				; Author: Luke Shoff
				;
				; Prints the menu screen with prompt.
				;--------------------------------------------------------------------------
 00000092  51		   *	    push   ecx
 00000093  52		   *	    push   edx
 00000094  E8 000002E7		    call ClearScreen                ; Clear the screen
 00000099  B9 00000005		    mov  ecx,5                      ; Newlines to print = 5
 0000009E  E8 00000305		    call PrintNewLines              ; Print newlines
 000000A3  BA 00000360 R	    mov  edx,OFFSET titleScr        ; EDX <-- BA of titleScr
 000000A8  E8 00000000 E	    call WriteString                ; Print Hangman title and options
 000000AD  B9 00000003		    mov  ecx,3                      ; Newlines to print = 3
 000000B2  E8 000002F1		    call PrintNewLines              ; Print newlines
 000000B7  BA 00000317 R	    mov  edx,OFFSET makeSelect      ; EDX <-- BA of makeSelect
 000000BC  E8 00000000 E	    call WriteString                ; Print prompt for user selection
				    ret
 000000C1  5A		   *	    pop    edx
 000000C2  59		   *	    pop    ecx
 000000C3  C3		   *	    ret    00000h
 000000C4			PrintMenu ENDP

				;--------------------------------------------------------------------------
 000000C4			PrintCredits PROC USES ecx edx
				; Author: Brendon Stutzman
				;
				; Prints the team credits screen with prompt.
				;--------------------------------------------------------------------------
 000000C4  51		   *	    push   ecx
 000000C5  52		   *	    push   edx
 000000C6  E8 000002B5		    call ClearScreen                ; Clears the screen
 000000CB  B9 00000005		    mov  ecx,5                      ; Newlines to print = 5
 000000D0  E8 000002D3		    call PrintNewLines              ; Print newlines
 000000D5  BA 000003B2 R	    mov  edx,OFFSET madeBy          ; EDX <-- BA of madeBy
 000000DA  E8 00000000 E	    call WriteString                ; Print our names
 000000DF  B9 00000003		    mov  ecx,3                      ; Newlines to print = 3
 000000E4  E8 000002BF		    call PrintNewLines              ; Print newlines
 000000E9  BA 0000032B R	    mov  edx,OFFSET pressKey        ; EDX <-- pressKey
 000000EE  E8 00000000 E	    call WriteString                ; Print prompt for key press
				    ret
 000000F3  5A		   *	    pop    edx
 000000F4  59		   *	    pop    ecx
 000000F5  C3		   *	    ret    00000h
 000000F6			PrintCredits ENDP

				;--------------------------------------------------------------------------
 000000F6			GetWord PROC USES eax ebx esi edi
				; Author: Christian Baker & Anthony Cardona
				;
				; Gets a random number between 0 and numOfWords - 1. Selects the
				; corresponding word element from the wordBank string array. Then, copies
				; that random word to theWord to be used for that round of the game.
				;--------------------------------------------------------------------------
 000000F6  50		   *	    push   eax
 000000F7  53		   *	    push   ebx
 000000F8  56		   *	    push   esi
 000000F9  57		   *	    push   edi
 000000FA  A0 00000033 R	    mov  al,numOfWords              ; AL <-- numOfWords
 000000FF  E8 00000000 E	    call Randomize                  ; Get randomizer seed
 00000104  E8 00000000 E	    call RandomRange                ; Get random # btwn 0 and EAX - 1
 00000109  BB 00000004		    mov  ebx,4                      ; Elements are dwords, so 4 bytes
 0000010E  F7 E3		    mul  ebx                        ; EAX *= EBX, Gets correct offset
 00000110  BE 00000202 R	    mov  esi,OFFSET wordBank        ; ESI <-- BA of wordBank
 00000115  03 F0		    add  esi,eax                    ; ESI += EAX, Go to BA for chosen word
 00000117  8B 3E		    mov  edi,[esi]                  ; EDI <-- Dereferenced BA
				    invoke Str_copy,                ; Copy chosen word to theWord
				        addr [edi],addr theWord
 00000119  68 00000000 R   *	    push   OFFSET theWord
 0000011E  8D 07	   *	    lea    eax,  [edi]
 00000120  50		   *	    push   eax
 00000121  E8 00000000 E   *	    call   Str_copy
				    ret
 00000126  5F		   *	    pop    edi
 00000127  5E		   *	    pop    esi
 00000128  5B		   *	    pop    ebx
 00000129  58		   *	    pop    eax
 0000012A  C3		   *	    ret    00000h
 0000012B			GetWord ENDP

				;--------------------------------------------------------------------------
 0000012B			PrintHangman PROC USES edx eax
				; Author: Anthony Cardona
				;
				; Prints the ASCII art Hangman character. Checks to see which parts to
				; print based on how many wrong letter guesses that the user has made.
				;--------------------------------------------------------------------------
 0000012B  52		   *	    push   edx
 0000012C  50		   *	    push   eax
 0000012D  66| BA 0000		    mov  dx,0                       ; Set cursor position to (0,0)
 00000131  E8 00000000 E	    call Gotoxy                     ; (Faster than clearing screen)
 00000136  A0 0000000F R	    mov  al,numOfWrong              ; AL  <-- numOfWrong
 0000013B  BA 00000424 R	    mov  edx,OFFSET gallowsTop      ; EDX <-- BA of gallowsTop
 00000140  E8 00000000 E	    call WriteString                ; Print top part of gallows

 00000145			TheHead:
 00000145  3C 01		    cmp  al,1                       ; If wrong guesses < 1...
 00000147  7C 07		    jl   TheNoose                   ; Then jump to TheNoose
 00000149  BA 00000469 R	    mov  edx,OFFSET manHead         ; EDX <-- BA of manHead
 0000014E  EB 05		    jmp  Write1                     ; Jump to Write1
 00000150			TheNoose:
 00000150  BA 00000445 R	    mov  edx,OFFSET gallowsNoose    ; EDX <-- BA of gallowsNoose
 00000155			Write1:
 00000155  E8 00000000 E	    call WriteString                ; Print line 1 option from EDX

 0000015A			TwoArms:
 0000015A  3C 04		    cmp  al,4                       ; If wrong guesses < 4...
 0000015C  7C 07		    jl   OneArm                     ; Then jump to OneArm
 0000015E  BA 0000048D R	    mov  edx,OFFSET manArms         ; EDX <-- BA manArms
 00000163  EB 1B		    jmp  Write2                     ; Jump to Write2
 00000165			OneArm:
 00000165  3C 03		    cmp  al,3                       ; If wrong guesses < 3...
 00000167  7C 07		    jl   TheTorso                   ; Then jump to TheTorso
 00000169  BA 00000481 R	    mov  edx,OFFSET manArm          ; EDX <-- BA of manArm
 0000016E  EB 10		    jmp  Write2                     ; Jump to Write2
 00000170			TheTorso:
 00000170  3C 02		    cmp  al,2                       ; If wrong guesses < 2...
 00000172  7C 07		    jl   NoTorso                    ; Then jump to NoTorso
 00000174  BA 00000475 R	    mov  edx,OFFSET manTorso        ; EDX <-- BA of manTorso
 00000179  EB 05		    jmp  Write2                     ; Jump to Write2
 0000017B			NoTorso:
 0000017B  BA 00000450 R	    mov  edx,OFFSET gallowsMid      ; EDX <-- gallowsMid
 00000180			Write2:
 00000180  E8 00000000 E	    call WriteString                ; Print line 2 option from EDX

 00000185			TwoLegs:
 00000185  3C 06		    cmp  al,6                       ; If wrong guesses < 6...
 00000187  7C 07		    jl   OneLeg                     ; Then jump to OneLeg
 00000189  BA 000004A5 R	    mov  edx,OFFSET manLegs         ; EDX <-- BA of manLegs
 0000018E  EB 10		    jmp  Write3                     ; Jump to Write3
 00000190			OneLeg:
 00000190  3C 05		    cmp  al,5                       ; If wrong guesses < 5...
 00000192  7C 07		    jl   NoLegs                     ; Then jump to NoLegs
 00000194  BA 0000049A R	    mov  edx,OFFSET manLeg          ; EDX <-- BA of manLeg
 00000199  EB 05		    jmp  Write3                     ; Jump to Write3
 0000019B			NoLegs:
 0000019B  BA 00000450 R	    mov  edx,OFFSET gallowsMid      ; EDX <-- BA of gallowsMid
 000001A0			Write3:
 000001A0  E8 00000000 E	    call WriteString                ; Print line 3 option from EDX

 000001A5  BA 00000456 R	    mov  edx,OFFSET gallowsBase     ; EDX <-- BA of gallowsBase
 000001AA  E8 00000000 E	    call WriteString                ; Print bottom part of gallows
				    ret
 000001AF  58		   *	    pop    eax
 000001B0  5A		   *	    pop    edx
 000001B1  C3		   *	    ret    00000h
 000001B2			PrintHangman ENDP

				;--------------------------------------------------------------------------
 000001B2			PrintWord PROC USES eax ecx edx esi edi
				; Author: Christian Baker
				;
				; Uses a nested loop to iterate through each character in theWord and
				; compares it to the correct characters guessed by the user. If it the
				; letter in the word is found in the correct guesses list, it will print
				; it out to the screen. If it is not found, it will instead print an
				; underscore, meaning it still needs to be guessed. If all characters
				; have been guessed, gameDone is set to true.
				;--------------------------------------------------------------------------
 000001B2  50		   *	    push   eax
 000001B3  51		   *	    push   ecx
 000001B4  52		   *	    push   edx
 000001B5  56		   *	    push   esi
 000001B6  57		   *	    push   edi
 000001B7  B0 01		    mov  al,1                       ; Assume gameDone is true (1)...
 000001B9  A2 00000032 R	    mov  gameDone,al                ; until proven otherwise

 000001BE  BE 00000000 R	    mov  esi,OFFSET theWord         ; ESI <-- BA of theWord
 000001C3  8A 36		    mov  dh,[esi]                   ; DH  <-- first letter of theWord
				    invoke Str_length,addr theWord  ; EAX <-- # of chars in theWord
 000001C5  68 00000000 R   *	    push   OFFSET theWord
 000001CA  E8 00000000 E   *	    call   Str_length
 000001CF  8B C8		    mov  ecx,eax                    ; ECX <-- EAX (outer counter)
 000001D1			OuterLoop:
 000001D1  51			    push ecx                        ; Push ECX to stack to save outer counter
 000001D2  BF 00000018 R	    mov  edi,OFFSET rightGuesses    ; EDI <-- BA of rightGuesses array
 000001D7  8A 16		    mov  dl,[esi]                   ; DL  <-- current letter of theWord

 000001D9  B0 20		    mov  al,' '                     ; AL  <-- space char
 000001DB  E8 00000000 E	    call WriteChar                  ; Print space (for between characters)

 000001E0  8A 0D 00000010 R	    mov  cl,numOfRight              ; CL  <-- # of right guesses (inner counter)
 000001E6  80 F9 00		    cmp  cl,0                       ; If no correct guesses yet...
 000001E9  7E 12		    jle  UnderScore                 ; Then jump to UnderScore

 000001EB			InnerLoop:
 000001EB  8A 37		    mov  dh,[edi]                   ; DH  <-- current letter from rightGuesses
 000001ED  3A D6		    cmp  dl,dh                      ; If theWord[outer] != rightGuesses[inner]...
 000001EF  75 09		    jne  NextCmp                    ; Then jump to NextCmp
 000001F1  8A C2		    mov  al,dl                      ; AL <-- theWord[outer]
 000001F3  E8 00000000 E	    call WriteChar                  ; Print the current letter of theWord
 000001F8  EB 11		    jmp  NextLetter                 ; Jump to NextLetter
 000001FA			NextCmp:
 000001FA  47			    inc  edi                        ; Inc EDI to next elem in rightGuesses
 000001FB  E2 EE		    loop InnerLoop                  ; Dec ECX and Jump to InnerLoop

 000001FD			UnderScore:
 000001FD  B0 5F		    mov  al,'_'                     ; AL  <-- underscore char
 000001FF  E8 00000000 E	    call WriteChar                  ; Print underscore (letter not guessed yet)
 00000204  B0 00		    mov  al,0                       ; Set gameDone to false (0)...
 00000206  A2 00000032 R	    mov  gameDone,al                ; b/c not all letters have been guessed

 0000020B			NextLetter:
 0000020B  46			    inc  esi                        ; Inc ESI to next letter of theWord
 0000020C  59			    pop  ecx                        ; Pop from stack to ECX to get outer counter
 0000020D  E2 C2		    loop OuterLoop                  ; Dec ECX and Jump to OuterLoop

 0000020F  B9 00000003		    mov  ecx,3                      ; Newlines to print = 3
 00000214  E8 0000018F		    call PrintNewlines              ; Print newlines
				    ret
 00000219  5F		   *	    pop    edi
 0000021A  5E		   *	    pop    esi
 0000021B  5A		   *	    pop    edx
 0000021C  59		   *	    pop    ecx
 0000021D  58		   *	    pop    eax
 0000021E  C3		   *	    ret    00000h
 0000021F			PrintWord ENDP

				;--------------------------------------------------------------------------
 0000021F			PrintGuesses PROC USES eax ecx edx esi
				; Author: Luke Shoff
				;
				; Prints a list of the characters the user has already guessed. Each
				; character is separated by a comma and a space, unless it is the last
				; character in the list.
				;--------------------------------------------------------------------------
 0000021F  50		   *	    push   eax
 00000220  51		   *	    push   ecx
 00000221  52		   *	    push   edx
 00000222  56		   *	    push   esi
 00000223  BA 0000033C R	    mov edx,OFFSET triedLetters     ; EDX <-- triedLetters
 00000228  E8 00000000 E	    call WriteString                ; Prints already tried message
 0000022D  BE 00000011 R	    mov  esi,OFFSET wrongGuesses    ; ESI <-- BA of wrongGuesse array
 00000232  8A 0D 0000000F R	    mov  cl,numOfWrong              ; CL  <-- numOfWrong
 00000238  80 F9 00		    cmp  cl,0                       ; If there are no wrong guesses yet...
 0000023B  7E 1D		    jle  Finish                     ; Jump to Finish

 0000023D			PrintLetter:
 0000023D  8A 06		    mov  al,[esi]                   ; AL  <-- current char of wrongGuesses
 0000023F  E8 00000000 E	    call WriteChar                  ; Print current char of wrongGuesses

 00000244  80 F9 01		    cmp  cl,1                       ; If last iteration...
 00000247  74 11		    je   Finish                     ; Jump to Finish (skip printing comma)
 00000249  B0 2C		    mov  al,','                     ; AL  <-- comma char
 0000024B  E8 00000000 E	    call WriteChar                  ; Print comma
 00000250  B0 20		    mov  al,' '                     ; AL  <-- space char
 00000252  E8 00000000 E	    call WriteChar                  ; Print space
 00000257  46			    inc  esi                        ; Inc ESI to next guess in wrongGuesses
 00000258  E2 E3		    loop PrintLetter                ; Dec ECX and jump to PrintLetter

 0000025A			Finish:
 0000025A  B9 00000002		    mov  ecx,2                      ; Newlines to print = 2
 0000025F  E8 00000144		    call PrintNewLines              ; Print newlines
				    ret
 00000264  5E		   *	    pop    esi
 00000265  5A		   *	    pop    edx
 00000266  59		   *	    pop    ecx
 00000267  58		   *	    pop    eax
 00000268  C3		   *	    ret    00000h
 00000269			PrintGuesses ENDP

				;--------------------------------------------------------------------------
 00000269			CheckChar PROC
				; Author Christian Baker
				;
				; Checks whether input is lowercase alphabet character. If it is,
				; character is converted to uppercase. Checks to make sure input is an
				; uppercase alphabet character. Checks if the user has already guessed
				; the character. Then, checks if the character is in the word. If it is,
				; it is added to the list of right guesses, and if it is not, it is added
				; to the list of wrong guesses. Finally, if the number of wrong guesses is
				; now, more than 7, then sets gameDone to true. If input is not an
				; alphabet character or it is a duplicate, it is ignored.
				;
				; Receives: EAX = user input
				;--------------------------------------------------------------------------
 00000269  8A D8		    mov  bl,al                      ; BL  <-- user input (to free up EAX)
 0000026B  80 FB 7A		    cmp  bl,'z'                     ; If user input is greater than 'z'...
 0000026E  0F 8F 000000A4	    jg   EndCheck                   ; Then invalid char, jump to EndCheck
 00000274  80 FB 61		    cmp  bl,'a'                     ; If user input is less than 'a'...
 00000277  7C 03		    jl   UpperCheck                 ; then jump to UpperCheck
 00000279  80 EB 20		    sub  bl,32                      ; Else, bl -= 32 to convert to upper

 0000027C			UpperCheck:
 0000027C  80 FB 5A		    cmp  bl,'Z'                     ; If user input is greater than 'Z'...
 0000027F  0F 8F 00000093	    jg   EndCheck                   ; Then invalid char, jump to EndCheck
 00000285  80 FB 41		    cmp  bl,'A'                     ; If user input is less than 'A'...
 00000288  0F 8C 0000008A	    jl   EndCheck                   ; Then invalid char, jump to EndCheck

 0000028E  BE 00000018 R	    mov  esi,OFFSET rightGuesses    ; ESI <-- BA of rightGuesses
 00000293  8A 0D 00000010 R	    mov  cl,numOfRight              ; CL  <-- numOfRightGuesses
 00000299  80 F9 00		    cmp  cl,0                       ; If there are no right guesses yet...
 0000029C  7E 09		    jle  SetupNext                  ; Then Jump to SetupNext

 0000029E			DupRight:
 0000029E  8A 16		    mov  dl,[esi]                   ; DL  <-- curr char of rightGuesses
 000002A0  3A DA		    cmp  bl,dl                      ; If input is already in right array...
 000002A2  74 74		    je   EndCheck                   ; Then duplicate char, jump to EndCheck
 000002A4  46			    inc  esi                        ; Inc ESI to next char in rightGuesses
 000002A5  E2 F7		    loop DupRight                   ; Dec ECX and jump to DupRight

 000002A7			SetupNext:
 000002A7  BE 00000018 R	    mov  esi,OFFSET rightGuesses    ; ESI <-- BA of rightGuesses
 000002AC  BF 00000000 R	    mov  edi,OFFSET theWord         ; EDI <-- BA of theWord
				    invoke Str_length,addr theWord  ; EAX <-- # of chars in theWord
 000002B1  68 00000000 R   *	    push   OFFSET theWord
 000002B6  E8 00000000 E   *	    call   Str_length
 000002BB  8B C8		    mov  ecx,eax                    ; ECX <-- EAX (for counter)
 000002BD			RightCheck:
 000002BD  8A 17		    mov  dl,[edi]                   ; DL  <-- curr char of theWord
 000002BF  3A DA		    cmp  bl,dl                      ; If the input char != theWord char...
 000002C1  75 15		    jne  NextChar                   ; Then jump to NextChar
 000002C3  0F B6 15		    movzx edx,numOfRight            ; EDX <-- numOfRight (zero extended)
	   00000010 R
 000002CA  03 F2		    add  esi,edx                    ; ESI += EDX, goto next open rightGuesses spot
 000002CC  88 1E		    mov  [esi],bl                   ; Write input to rightGuesses array
 000002CE  FE C2		    inc  dl                         ; Inc DL (increment num of right guesses)
 000002D0  88 15 00000010 R	    mov  numOfRight,dl              ; Write incremented value to numOfRight
 000002D6  EB 40		    jmp  EndCheck                   ; Input valid and recorded, jump to EndCheck
 000002D8			NextChar:
 000002D8  47			    inc  edi                        ; Inc EDI to move to next char in theWord
 000002D9  E2 E2		    loop RightCheck                 ; Dec ECX and jump to RightCheck

 000002DB  BE 00000011 R	    mov  esi,OFFSET wrongGuesses    ; ESI <-- BA of wrongGuesses
 000002E0  8A 0D 0000000F R	    mov  cl,numOfWrong              ; CL  <-- numOfWrong
 000002E6  80 F9 00		    cmp  cl,0                       ; If there are no wrong guesses yet...
 000002E9  7E 09		    jle  AddWrong                   ; Then jump to AddWrong

 000002EB			DupWrong:
 000002EB  8A 16		    mov  dl,[esi]                   ; DL  <-- curr char of wrongGuesses
 000002ED  3A DA		    cmp  bl,dl                      ; If input is already in wrong array...
 000002EF  74 27		    je   EndCheck                   ; Then duplicate char, jump to EndCheck
 000002F1  46			    inc  esi                        ; Inc ESI to next char in wrongGuesses
 000002F2  E2 F7		    loop DupWrong                   ; Dec ECX and jump to DupWrong

 000002F4			AddWrong:
 000002F4  BE 00000011 R	    mov  esi,OFFSET wrongGuesses    ; ESI <-- BA of wrongGuesses
 000002F9  0F B6 15		    movzx edx,numOfWrong            ; EDX <-- numOfWrong (zero extended)
	   0000000F R
 00000300  03 F2		    add  esi,edx                    ; ESI += EDX, goto next open wrongGuesses spot
 00000302  88 1E		    mov  [esi],bl                   ; Write input to wrongGuesses array
 00000304  FE C2		    inc  dl                         ; Inc DL (increment num of wrong guesses)
 00000306  88 15 0000000F R	    mov  numOfWrong,dl              ; Write incremented value to numOfWrong

 0000030C  80 FA 06		    cmp  dl,6                       ; If numOfWrong < 6 (Less than 7 guesses)...
 0000030F  7E 07		    jle  EndCheck                   ; Then, jump to EndCheck
 00000311  B0 01		    mov  al,1                       ; Else, set gameDone to true (1)
 00000313  A2 00000032 R	    mov  gameDone,al                ; b/c user is out of guesses

 00000318			EndCheck:
 00000318  C3			    ret
 00000319			CheckChar ENDP

				;--------------------------------------------------------------------------
 00000319			PrintEnd PROC USES eax ecx edx
				; Author: Brendon Stutzman
				;
				; Prints a winner or loser screen based on the outcome of the game, then
				; reveals what the word to be guessed was with key press prompt.
				;--------------------------------------------------------------------------
 00000319  50		   *	    push   eax
 0000031A  51		   *	    push   ecx
 0000031B  52		   *	    push   edx
 0000031C  E8 0000005F		    call ClearScreen                ; Clear the screen
 00000321  B9 00000005		    mov  ecx,5                      ; Newlines to print = 5
 00000326  E8 0000007D		    call PrintNewLines              ; Print newlines
 0000032B  A0 0000000F R	    mov  al,numOfWrong              ; AL  <-- numOfWrong

 00000330			UserLost:
 00000330  3C 06		    cmp  al,6                       ; If numOfWrong < 6...
 00000332  7E 0C		    jle  UserWon                    ; Then jump to UserWon
 00000334  BA 000004C7 R	    mov  edx,OFFSET loserMsg        ; EDX <-- BA of loserMsg
 00000339  E8 00000000 E	    call WriteString                ; Print the loser message
 0000033E  EB 0A		    jmp  RevealWord                 ; jump to RevealWord
 00000340			UserWon:
 00000340  BA 000004B1 R	    mov  edx,OFFSET winnerMsg       ; EDX <-- BA of winnerMsg
 00000345  E8 00000000 E	    call WriteString                ; Print the winner message

 0000034A			RevealWord:
 0000034A  B9 00000002		    mov  ecx,2                      ; Newlines to print = 2
 0000034F  E8 00000054		    call PrintNewLines              ; Print newlines
 00000354  BA 000004DE R	    mov  edx,OFFSET wordWas         ; EDX <-- BA of wordWas
 00000359  E8 00000000 E	    call WriteString                ; Print word was string
 0000035E  BA 00000000 R	    mov  edx,OFFSET theWord         ; EDX <-- BA of theWord
 00000363  E8 00000000 E	    call WriteString                ; Print the word of the game
 00000368  B9 00000005		    mov  ecx,5                      ; Newlines to print = 5
 0000036D  E8 00000036		    call PrintNewLines              ; Print newlines
 00000372  BA 0000032B R	    mov  edx,OFFSET pressKey        ; EDX <-- BA of pressKey
 00000377  E8 00000000 E	    call WriteString                ; Prints press key prompt
				    ret
 0000037C  5A		   *	    pop    edx
 0000037D  59		   *	    pop    ecx
 0000037E  58		   *	    pop    eax
 0000037F  C3		   *	    ret    00000h
 00000380			PrintEnd ENDP

				;-- EXTRA UTILITY PROCEDURES ----------------------------------------------

				;--------------------------------------------------------------------------
 00000380			ClearScreen PROC USES ecx edx
				; Author: Christian Baker
				;
				; Clears only the lines that are used in the program. This was needed
				; because the Clrscr procedure in the Irvine Library that clears the
				; entire window was lagging badly.
				;--------------------------------------------------------------------------
 00000380  51		   *	    push   ecx
 00000381  52		   *	    push   edx
 00000382  B9 0000000F		    mov  ecx,15                     ; # of lines to print (Game screen height)
 00000387  66| BA 0000		    mov  dx,0                       ; Set cursor position to (0,0)
 0000038B  E8 00000000 E	    call Gotoxy
 00000390  BA 000002F2 R	    mov  edx,OFFSET clearStr        ; EDX <-- clearString
 00000395			ClearLines:
 00000395  E8 00000000 E	    call WriteString                ; Print spaces over previous screen
 0000039A  E2 F9		    loop ClearLines                 ; Dec ECX and jump to ClearLines

 0000039C  66| BA 0000		    mov  dx,0                       ; Set cursor postion to (0,0)
 000003A0  E8 00000000 E	    call Gotoxy                     ; to set up for next screen
				    ret
 000003A5  5A		   *	    pop    edx
 000003A6  59		   *	    pop    ecx
 000003A7  C3		   *	    ret    00000h
 000003A8			ClearScreen ENDP

				;--------------------------------------------------------------------------
 000003A8			PrintNewLines PROC
				; Author: Christian Baker
				;
				; Prints the newlines as many times as the number that is in ECX register.
				;
				; Receives: ECX = # of newlines to print
				;--------------------------------------------------------------------------
 000003A8			PrintLines:
 000003A8  E8 00000000 E	    call Crlf                       ; Print newline
 000003AD  E2 F9		    loop PrintLines                 ; Dec ECX and jump to PrintLines
 000003AF  C3			    ret
 000003B0			PrintNewLines ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29914.0	    05/05/21 00:53:08
Hangman         (Hangman.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004FD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000003B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckChar  . . . . . . . . . . .	P Near	 00000269 _TEXT	Length= 000000B0 Public STDCALL
  UpperCheck . . . . . . . . . .	L Near	 0000027C _TEXT	
  DupRight . . . . . . . . . . .	L Near	 0000029E _TEXT	
  SetupNext  . . . . . . . . . .	L Near	 000002A7 _TEXT	
  RightCheck . . . . . . . . . .	L Near	 000002BD _TEXT	
  NextChar . . . . . . . . . . .	L Near	 000002D8 _TEXT	
  DupWrong . . . . . . . . . . .	L Near	 000002EB _TEXT	
  AddWrong . . . . . . . . . . .	L Near	 000002F4 _TEXT	
  EndCheck . . . . . . . . . . .	L Near	 00000318 _TEXT	
ClearScreen  . . . . . . . . . .	P Near	 00000380 _TEXT	Length= 00000028 Public STDCALL
  ClearLines . . . . . . . . . .	L Near	 00000395 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetWord  . . . . . . . . . . . .	P Near	 000000F6 _TEXT	Length= 00000035 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintCredits . . . . . . . . . .	P Near	 000000C4 _TEXT	Length= 00000032 Public STDCALL
PrintEnd . . . . . . . . . . . .	P Near	 00000319 _TEXT	Length= 00000067 Public STDCALL
  UserLost . . . . . . . . . . .	L Near	 00000330 _TEXT	
  UserWon  . . . . . . . . . . .	L Near	 00000340 _TEXT	
  RevealWord . . . . . . . . . .	L Near	 0000034A _TEXT	
PrintGuesses . . . . . . . . . .	P Near	 0000021F _TEXT	Length= 0000004A Public STDCALL
  PrintLetter  . . . . . . . . .	L Near	 0000023D _TEXT	
  Finish . . . . . . . . . . . .	L Near	 0000025A _TEXT	
PrintHangman . . . . . . . . . .	P Near	 0000012B _TEXT	Length= 00000087 Public STDCALL
  TheHead  . . . . . . . . . . .	L Near	 00000145 _TEXT	
  TheNoose . . . . . . . . . . .	L Near	 00000150 _TEXT	
  Write1 . . . . . . . . . . . .	L Near	 00000155 _TEXT	
  TwoArms  . . . . . . . . . . .	L Near	 0000015A _TEXT	
  OneArm . . . . . . . . . . . .	L Near	 00000165 _TEXT	
  TheTorso . . . . . . . . . . .	L Near	 00000170 _TEXT	
  NoTorso  . . . . . . . . . . .	L Near	 0000017B _TEXT	
  Write2 . . . . . . . . . . . .	L Near	 00000180 _TEXT	
  TwoLegs  . . . . . . . . . . .	L Near	 00000185 _TEXT	
  OneLeg . . . . . . . . . . . .	L Near	 00000190 _TEXT	
  NoLegs . . . . . . . . . . . .	L Near	 0000019B _TEXT	
  Write3 . . . . . . . . . . . .	L Near	 000001A0 _TEXT	
PrintMenu  . . . . . . . . . . .	P Near	 00000092 _TEXT	Length= 00000032 Public STDCALL
PrintNewLines  . . . . . . . . .	P Near	 000003A8 _TEXT	Length= 00000008 Public STDCALL
  PrintLines . . . . . . . . . .	L Near	 000003A8 _TEXT	
PrintWord  . . . . . . . . . . .	P Near	 000001B2 _TEXT	Length= 0000006D Public STDCALL
  OuterLoop  . . . . . . . . . .	L Near	 000001D1 _TEXT	
  InnerLoop  . . . . . . . . . .	L Near	 000001EB _TEXT	
  NextCmp  . . . . . . . . . . .	L Near	 000001FA _TEXT	
  UnderScore . . . . . . . . . .	L Near	 000001FD _TEXT	
  NextLetter . . . . . . . . . .	L Near	 0000020B _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000092 Public STDCALL
  MainMenu . . . . . . . . . . .	L Near	 00000000 _TEXT	
  PlayGame . . . . . . . . . . .	L Near	 00000018 _TEXT	
  ContGame . . . . . . . . . . .	L Near	 00000036 _TEXT	
  EndGame  . . . . . . . . . . .	L Near	 0000006B _TEXT	
  CreditScreen . . . . . . . . .	L Near	 00000077 _TEXT	
  QuitGame . . . . . . . . . . .	L Near	 00000086 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
chooseLetter . . . . . . . . . .	Byte	 0000034D _DATA	
clearStr . . . . . . . . . . . .	Byte	 000002F2 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gallowsBase  . . . . . . . . . .	Byte	 00000456 _DATA	
gallowsMid . . . . . . . . . . .	Byte	 00000450 _DATA	
gallowsNoose . . . . . . . . . .	Byte	 00000445 _DATA	
gallowsTop . . . . . . . . . . .	Byte	 00000424 _DATA	
gameDone . . . . . . . . . . . .	Byte	 00000032 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
loserMsg . . . . . . . . . . . .	Byte	 000004C7 _DATA	
madeBy . . . . . . . . . . . . .	Byte	 000003B2 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
makeSelect . . . . . . . . . . .	Byte	 00000317 _DATA	
manArms  . . . . . . . . . . . .	Byte	 0000048D _DATA	
manArm . . . . . . . . . . . . .	Byte	 00000481 _DATA	
manHead  . . . . . . . . . . . .	Byte	 00000469 _DATA	
manLegs  . . . . . . . . . . . .	Byte	 000004A5 _DATA	
manLeg . . . . . . . . . . . . .	Byte	 0000049A _DATA	
manTorso . . . . . . . . . . . .	Byte	 00000475 _DATA	
numOfRight . . . . . . . . . . .	Byte	 00000010 _DATA	
numOfWords . . . . . . . . . . .	Byte	 00000033 _DATA	
numOfWrong . . . . . . . . . . .	Byte	 0000000F _DATA	
pressKey . . . . . . . . . . . .	Byte	 0000032B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rightGuesses . . . . . . . . . .	Byte	 00000018 _DATA	
theWord  . . . . . . . . . . . .	Byte	 00000000 _DATA	
titleScr . . . . . . . . . . . .	Byte	 00000360 _DATA	
triedLetters . . . . . . . . . .	Byte	 0000033C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winnerMsg  . . . . . . . . . . .	Byte	 000004B1 _DATA	
word00 . . . . . . . . . . . . .	Byte	 00000034 _DATA	
word01 . . . . . . . . . . . . .	Byte	 0000003D _DATA	
word02 . . . . . . . . . . . . .	Byte	 00000043 _DATA	
word03 . . . . . . . . . . . . .	Byte	 0000004A _DATA	
word04 . . . . . . . . . . . . .	Byte	 00000053 _DATA	
word05 . . . . . . . . . . . . .	Byte	 00000059 _DATA	
word06 . . . . . . . . . . . . .	Byte	 00000062 _DATA	
word07 . . . . . . . . . . . . .	Byte	 00000069 _DATA	
word08 . . . . . . . . . . . . .	Byte	 00000070 _DATA	
word09 . . . . . . . . . . . . .	Byte	 00000076 _DATA	
word10 . . . . . . . . . . . . .	Byte	 0000007D _DATA	
word11 . . . . . . . . . . . . .	Byte	 00000085 _DATA	
word12 . . . . . . . . . . . . .	Byte	 0000008B _DATA	
word13 . . . . . . . . . . . . .	Byte	 00000091 _DATA	
word14 . . . . . . . . . . . . .	Byte	 00000098 _DATA	
word15 . . . . . . . . . . . . .	Byte	 0000009F _DATA	
word16 . . . . . . . . . . . . .	Byte	 000000AA _DATA	
word17 . . . . . . . . . . . . .	Byte	 000000B1 _DATA	
word18 . . . . . . . . . . . . .	Byte	 000000BC _DATA	
word19 . . . . . . . . . . . . .	Byte	 000000C3 _DATA	
word20 . . . . . . . . . . . . .	Byte	 000000CC _DATA	
word21 . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
word22 . . . . . . . . . . . . .	Byte	 000000DB _DATA	
word23 . . . . . . . . . . . . .	Byte	 000000E3 _DATA	
word24 . . . . . . . . . . . . .	Byte	 000000EC _DATA	
word25 . . . . . . . . . . . . .	Byte	 000000F3 _DATA	
word26 . . . . . . . . . . . . .	Byte	 000000FA _DATA	
word27 . . . . . . . . . . . . .	Byte	 00000105 _DATA	
word28 . . . . . . . . . . . . .	Byte	 0000010E _DATA	
word29 . . . . . . . . . . . . .	Byte	 00000118 _DATA	
word30 . . . . . . . . . . . . .	Byte	 00000120 _DATA	
word31 . . . . . . . . . . . . .	Byte	 00000129 _DATA	
word32 . . . . . . . . . . . . .	Byte	 00000132 _DATA	
word33 . . . . . . . . . . . . .	Byte	 00000138 _DATA	
word34 . . . . . . . . . . . . .	Byte	 00000143 _DATA	
word35 . . . . . . . . . . . . .	Byte	 00000149 _DATA	
word36 . . . . . . . . . . . . .	Byte	 00000151 _DATA	
word37 . . . . . . . . . . . . .	Byte	 0000015A _DATA	
word38 . . . . . . . . . . . . .	Byte	 00000162 _DATA	
word39 . . . . . . . . . . . . .	Byte	 00000168 _DATA	
word40 . . . . . . . . . . . . .	Byte	 0000016F _DATA	
word41 . . . . . . . . . . . . .	Byte	 00000175 _DATA	
word42 . . . . . . . . . . . . .	Byte	 0000017E _DATA	
word43 . . . . . . . . . . . . .	Byte	 00000185 _DATA	
word44 . . . . . . . . . . . . .	Byte	 0000018B _DATA	
word45 . . . . . . . . . . . . .	Byte	 00000192 _DATA	
word46 . . . . . . . . . . . . .	Byte	 00000199 _DATA	
word47 . . . . . . . . . . . . .	Byte	 000001A0 _DATA	
word48 . . . . . . . . . . . . .	Byte	 000001A7 _DATA	
word49 . . . . . . . . . . . . .	Byte	 000001AC _DATA	
word50 . . . . . . . . . . . . .	Byte	 000001B2 _DATA	
word51 . . . . . . . . . . . . .	Byte	 000001BC _DATA	
word52 . . . . . . . . . . . . .	Byte	 000001C3 _DATA	
word53 . . . . . . . . . . . . .	Byte	 000001CB _DATA	
word54 . . . . . . . . . . . . .	Byte	 000001D2 _DATA	
word55 . . . . . . . . . . . . .	Byte	 000001DC _DATA	
word56 . . . . . . . . . . . . .	Byte	 000001E3 _DATA	
word57 . . . . . . . . . . . . .	Byte	 000001EB _DATA	
word58 . . . . . . . . . . . . .	Byte	 000001F2 _DATA	
word59 . . . . . . . . . . . . .	Byte	 000001FC _DATA	
wordBank . . . . . . . . . . . .	DWord	 00000202 _DATA	
wordWas  . . . . . . . . . . . .	Byte	 000004DE _DATA	
wrongGuesses . . . . . . . . . .	Byte	 00000011 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
